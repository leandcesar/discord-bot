exclude: |
  (?x)^(
      .*\{\{.*\}\}.*|     # Exclude any files with cookiecutter variables
      docs/site/.*|       # Exclude mkdocs compiled files
      \.history/.*|       # Exclude history files
      .*cache.*/.*|       # Exclude cache directories
      .*venv.*/.*|        # Exclude virtual environment directories
  )$

fail_fast: true

default_install_hook_types:
  - pre-commit

repos:

  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.3
    hooks:
      - id: bandit
        args: ["-c", "pyproject.toml"]
        additional_dependencies: ["bandit[toml]"]
        name: "🔒 Security · Code security analysis"

  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.22.1
    hooks:
      - id: gitleaks
        name: "🔒 Security · Detect hardcoded secrets"

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: detect-private-key
        name: "🔒 Security · Detect private keys"

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.15.0
    hooks:
      - id: mypy
        additional_dependencies: [
          mypy-extensions==1.0.0,
        ]
        name: "🐍 Python/🧹 Lint · Validate types"

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.9.6
    hooks:
      - id: ruff
        args: [ --fix ]
        name: "🐍 Python/🧹 Lint · Validate with Ruff"

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: debug-statements
        name: "🐍 Python/🧹 Lint · Remove debug statements"

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: check-docstring-first
        name: "🐍 Python/🎨 Format · Ensure docstring comes first"

  - repo: https://github.com/pycqa/isort
    rev: 6.0.0
    hooks:
      - id: isort
        args: ["src"]
        name: "🐍 Python/🎨 Format · Sort imports"

  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        args: ["src"]
        name: "🐍 Python/🎨 Format · Format with Black"

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: check-executables-have-shebangs
        name: "📁 Filesystem/⚙️ Exec · Verify shebang presence"
      - id: check-shebang-scripts-are-executable
        name: "📁 Filesystem/⚙️ Exec · Verify script permissions"
      - id: check-symlinks
        name: "📁 Filesystem/🔗 Symlink · Check symlink validity"
      - id: destroyed-symlinks
        name: "📁 Filesystem/🔗 Symlink · Detect broken symlinks"

  - repo: https://github.com/abravalheri/validate-pyproject
    rev: v0.23
    hooks:
      - id: validate-pyproject
        additional_dependencies: ["validate-pyproject-schema-store[all]"]
        name: "📁 Filesystem/🧹 Lint · Validate pyproject.toml file"

  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.31.0
    hooks:
      - id: check-github-workflows
        args: ["--verbose"]
        name: "📁 Filesystem/🧹 Lint · Validate GitHub Actions workflow files"

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: check-case-conflict
        name: "📁 Filesystem/🧹 Lint · Check case sensitivity"
      - id: check-illegal-windows-names
        name: "📁 Filesystem/🧹 Lint · Validate Windows filenames"

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: end-of-file-fixer
        name: "📁 Filesystem/🎨 Format · Fix end-of-file newline"
      - id: trailing-whitespace
        name: "📁 Filesystem/🎨 Format · Remove trailing whitespace"

  - repo: https://github.com/hukkin/mdformat
    rev: 0.7.21
    hooks:
      - id: mdformat
        additional_dependencies:
          - mdformat-gfm          # GitHub-Flavored Markdown support
          - mdformat-ruff         # Python code formatting
          - mdformat-frontmatter  # YAML frontmatter support
          - ruff                  # Required for mdformat-ruff
        name: "📁 Filesystem/🎨 Format · Format Markdown files"

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: check-merge-conflict
        name: "🌳 Git · Detect conflict markers"
      - id: forbid-new-submodules
        name: "🌳 Git · Prevent submodule creation"
      - id: no-commit-to-branch
        args: ["--branch", "main", "--branch", "master"]
        name: "🌳 Git · Protect main branches"
      - id: check-added-large-files
        args: ['--maxkb=5000']
        name: "🌳 Git · Block large file commits"

  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v2.3.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        name: "🌳 Git · Validate commit message"

  # - repo: local
  #   hooks:
  #     - id: pytest-collect
  #       entry: ./.venv/bin/pytest tests
  #       language: system
  #       types: [python]
  #       args: ["--collect-only"]
  #       pass_filenames: false
  #       always_run: true
  #       name: 🧪 Test · Validate test formatting
  #     - id: pytest-fast
  #       entry: ./.venv/bin/pytest tests
  #       language: system
  #       types: [python]
  #       args: ["--max-timeout=3"]
  #       pass_filenames: false
  #       always_run: true
  #       name: 🧪 Test · Run fast tests
